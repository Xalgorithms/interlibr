{
  "id" : "10.1010101010.0001",
  "name" : "CA-QC_MJQ_RLRQ_T-1_r1_2R3(a)",
  "description" : "Quebec, Fuel Tax Act, Border Region Tax Reduction",
  "effective": [
    "2017-01-01T00:00:00+00:01",
    "2017-12-31T23:59:59+99:99"
  ],
  "criticality" : "experimental",
  "roles" : {
    "author" : "foo@bar.com",  // Shouldn't we indicate that ID could be email, or something definitive?  Everntually, yes
    "guardian" : "foo@bar.com"
    "comitter" : "foo@bar.com"
  },
  // this documents EVERYTHING that MUST BE loaded into the compute
  // context before calculations proceed. the items requirements could
  // be written to prefail BEFORE we compute across the items
  "requires" : {
    // supporting tables name:version - note these should be able to be
    // foreign systems that yield table-like structures... the registry
    // in the example (https://etherpad.wikimedia.org/p/xalgorithms12a) is
    // unlikely to be stored ANYWHERE like it is represented @URL  // I don't understand what you mean. Just a note for myself explaining that "tables" may be generated by a remote system, not stored.
    "tables" : [
      "distance_registry",
      "reduction_per_litre"
    ],
    "envelope" : [
      // string
      "type",
      // date/time as issue.date, issue.time
      // could also ask for ONLY issue.date || issue.time
      "issue",
      // includes identifying info, region, industry code etc
      "parties.supplier"
    ],
    "items" : [
      // UBL: ItemClassificationCode
      "classification",
      // UBL: InvoicedQuantity
      "quantity",
      // UBL: BaseUnitMeasure  // Is there an advantage to reducing the terminology? Yes, it neutralises our platform away from UBL and allows us to collapse or expand concepts for our purpose. First purpose: Naming in UBL is obtuse.
      "unit",
      // may need to bring in pricing elements
    ]
  },
  // using ONLY the required keys above, this section is used to
  // filter out entire docs or items based on values here
  "filters" : {
    "envelope" : {
      "type" : ["invoice", "purchase_order"],
      "locations.supplier.country" : "CA",
      "locations.supplier.subentity" : "CA-QC",
      // ISIC specified?
      "industry.supplier" : "4730"
    },
    "items" : {
      // UNSPSC specified?
      "classification" : "506505"
    }
  },
  // calculations we'll do, with placeholders for named values
  // these may be immediate (written out in an arithmetic expression)
  // OR there may be a reference into a table loaded in the requires
  // section that yield a single row containing the same type of
  // string... we'll need to have some sort of representation of
  // the arithmetic in the source-style of the rule that is parsed
  // into the eventual representation here
  // formulae can have any number of arguments (it's a list) BUT
  // they do specific things with the arguments based on the placeholders, so
  // caveat emptor if you load a formula from a table somewhere and use it
  // w/o reading the docs...  // we need to make the documentation easily accessible, in increasing levels of expressed detail
  "formulae" : {
  },
  // things to do @each line
  "steps" : [
    // 1. lookup the distance in the registry
    {
      "action" : "lookup",
      "table" : "distance_registry",
      "criteria" : {
        "parties.supplier.id" : ["eql", "EffectiveUserID"]
      },
      "select" : {
        "distance" : "2R3(a)_Distance"
      }
    },
    // 2. lookup the reduction in the reductions table using 1
    {
      "action" : "lookup",
      "table" : "reduction_per_litre",
      "criteria" : {
        "distance": ["less_than_equal", "2R3(a)_Distance"]
      },
      "select" : {
        "reduction" : "2R3(a)_ReductionPerLitre"
      }
    },
    // maybe: convert to litres
    // 3. apply the built-in formula "multiply({amount}, {2})
    {
      "action" : "apply",
      "formula" : "multiply",
      // this is a built-in formula, so the args are a pure list
      // if this was a table-defined formula, we do:
      // {
      //   "name-in-context" : "placeholder-name"
      // }
      "arguments" : ["quantity", "reduction"],
      "assign" : "reduction_amount"
    }
  ]
}
